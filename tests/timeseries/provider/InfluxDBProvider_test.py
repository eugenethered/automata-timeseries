import logging
import unittest
from datetime import datetime, timedelta

from coreutility.date.NanoTimestamp import NanoTimestamp

from timeseries.provider.InfluxDBProvider import InfluxDBProvider


class InfluxDBProviderTestCase(unittest.TestCase):

    def setUp(self):
        logging.basicConfig(level=logging.INFO)
        logging.getLogger('InfluxDBProvider').setLevel(logging.DEBUG)

        self.options = {
            'INFLUXDB_SERVER_ADDRESS': '127.0.0.1',
            'INFLUXDB_SERVER_PORT': 8086,
            'INFLUXDB_AUTH_TOKEN': 'q3cfJCCyfo4RNJuyg72U-3uEhrv3qkKQcDOesoyeIDg2BCUpmn-mjReqaGwO7GOebhd58wYVkopi5tcgCj8t5w==',
            'INFLUXDB_AUTH_ORG': 'persuader-technology',
            'INFLUXDB_BUCKET': 'automata'
        }

    def tearDown(self):
        timeseries_provider = InfluxDBProvider(self.options)
        timeseries_provider.delete_timeseries('timeseries-test')

    def test_should_connect_to_influxdb_server(self):
        timeseries_provider = InfluxDBProvider(self.options)
        connected = timeseries_provider.can_connect()
        self.assertEqual(connected, True)

    def test_should_obtain_timeseries_points(self):
        # using write-multiple-timeseries-points.sh (CURL api simulation)
        timeseries_provider = InfluxDBProvider(self.options)
        timeseries_data = timeseries_provider.get_timeseries_data('timeseries-test', 'test')
        self.assertEqual(len(timeseries_data), 5)

    def test_should_store_time_series_point_with_autogenerated_date(self):
        timeseries_provider = InfluxDBProvider(self.options)
        timeseries_provider.add_to_timeseries('timeseries-test', 'test', 1.00)
        timeseries_data = timeseries_provider.get_timeseries_data('timeseries-test', 'test')
        (point_timestamp, point_value) = timeseries_data[0]
        self.assertRegex(point_timestamp.__str__(), r'^\d{16}$')
        self.assertEqual(point_value, 1.00)

    def test_should_store_time_series_point_with_specified_date(self):
        timeseries_provider = InfluxDBProvider(self.options)
        timeseries_provider.add_to_timeseries('timeseries-test', 'test', 2.00, NanoTimestamp.get_nanoseconds())
        timeseries_data = timeseries_provider.get_timeseries_data('timeseries-test', 'test')
        (point_timestamp, point_value) = timeseries_data[0]
        self.assertRegex(point_timestamp.__str__(), r'^\d{16}$')
        self.assertEqual(point_value, 2.00)

    def test_should_store_multiple_time_series_points_without_specifying_time(self):
        timeseries_provider = InfluxDBProvider(self.options)
        data = [
            ('test', 10.00),
            ('test', 11.00),
            ('test', 12.00)
        ]
        timeseries_provider.batch_add_to_timeseries('timeseries-test', data)
        timeseries_data = timeseries_provider.get_timeseries_data('timeseries-test', 'test')
        expected = [10.0, 11.0, 12.0]
        self.assertRegex(timeseries_data[0][0].__str__(), r'^\d{19}$')
        self.assertEqual(expected[0], timeseries_data[0][1])
        self.assertRegex(timeseries_data[1][0].__str__(), r'^\d{19}$')
        self.assertEqual(expected[1], timeseries_data[1][1])
        self.assertRegex(timeseries_data[2][0].__str__(), r'^\d{19}$')
        self.assertEqual(expected[2], timeseries_data[2][1])


if __name__ == '__main__':
    unittest.main()
