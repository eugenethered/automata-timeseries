import logging
import unittest
from datetime import datetime, timedelta

from coreutility.date_utility import as_nano_second_timestamp

from timeseries.provider.InfluxDBProvider import InfluxDBProvider


class InfluxDBProviderTestCase(unittest.TestCase):

    def setUp(self):
        logging.basicConfig(level=logging.INFO)
        logging.getLogger('InfluxDBProvider').setLevel(logging.DEBUG)

        self.options = {
            'INFLUXDB_SERVER_ADDRESS': '127.0.0.1',
            'INFLUXDB_SERVER_PORT': 8086,
            'INFLUXDB_AUTH_TOKEN': 'q3cfJCCyfo4RNJuyg72U-3uEhrv3qkKQcDOesoyeIDg2BCUpmn-mjReqaGwO7GOebhd58wYVkopi5tcgCj8t5w==',
            'INFLUXDB_AUTH_ORG': 'persuader-technology',
            'INFLUXDB_BUCKET': 'automata'
        }

    def tearDown(self):
        timeseries_provider = InfluxDBProvider(self.options)
        timeseries_provider.delete_timeseries('timeseries-test')

    def test_should_connect_to_influxdb_server(self):
        timeseries_provider = InfluxDBProvider(self.options)
        connected = timeseries_provider.can_connect()
        self.assertEqual(connected, True)

    def test_should_store_time_series_point_with_autogenerated_date(self):
        timeseries_provider = InfluxDBProvider(self.options)
        timeseries_provider.add_to_timeseries('timeseries-test', 'test', 1.00)
        timeseries_data = timeseries_provider.get_timeseries_data('timeseries-test', 'test')
        (point_timestamp, point_value) = timeseries_data[0]
        self.assertRegex(point_timestamp.__str__(), r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}Z$')
        self.assertEqual(point_value, 1.00)

    def test_should_store_time_series_point_with_specified_date(self):
        timeseries_provider = InfluxDBProvider(self.options)
        time = as_nano_second_timestamp()
        print(f'creating at time:[{time}]')
        timeseries_provider.add_to_timeseries('timeseries-test', 'test', 2.00, time)
        timeseries_data = timeseries_provider.get_timeseries_data('timeseries-test', 'test')
        (point_timestamp, point_value) = timeseries_data[0]
        self.assertRegex(point_timestamp.__str__(), r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}Z$')
        self.assertEqual(point_value, 2.00)

    def test_should_store_time_series(self):
        timeseries_provider = InfluxDBProvider(self.options)
        timeseries_provider.add_to_timeseries('timeseries-test', 'test', 10.00, as_nano_second_timestamp(datetime.now() - timedelta(seconds=20)))
        timeseries_provider.add_to_timeseries('timeseries-test', 'test', 11.00, as_nano_second_timestamp(datetime.now() - timedelta(seconds=10)))
        timeseries_provider.add_to_timeseries('timeseries-test', 'test', 12.00, as_nano_second_timestamp(datetime.now()))
        timeseries_data = timeseries_provider.get_timeseries_data('timeseries-test', 'test')
        timeseries_data_values = [point[1] for point in timeseries_data]
        print(timeseries_data_values)
        expected = [(1, 10.0), (2, 11.0), (3, 12.0)]
        self.assertEqual(expected, timeseries_data)


if __name__ == '__main__':
    unittest.main()
